generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  OWNER // 소상공인
  DRIVER // 배송기사
}

enum DeliveryStatus {
  PENDING // 수거 전
  IN_PROGRESS // 배송 중
  COMPLETED // 배송 완료
}

enum DocumentType {
  LICENSE // 운송 자격증
  CAREER // 경력 증명서
}

enum PointTransactionType {
  CHARGE  // 충전
  USE     // 사용
}

model User {
  // 🧍 공통 필드
  id         Int      @id @default(autoincrement()) // MySQL 고유 ID
  email      String   @unique // 로그인용 이메일 (중복 불가)
  password   String // 해싱된 비밀번호
  name       String // 사용자 이름
  userType   UserType // 사용자 유형 (OWNER | DRIVER)
  isApproved Boolean  @default(false) // 관리자의 승인 여부
  createdAt  DateTime @default(now()) // 생성 시각
  

  // 소상공인(OWNER) 전용
  storeInfo          StoreInfo?
  subscriptionPlan   SubscriptionPlan?  @relation(fields: [subscriptionPlanId], references: [id]) // 선택한 구독제
  subscriptionPlanId Int? // 구독제 ID
  ownedParcels       Parcel[]           @relation("OwnerDetails") // 소상공인이 보낸 소포들
  points             PointTransaction[] // 포인트 충전 및 사용 내역
  defaultPickupDate String? // 사용자가 처음 설정한 수거 희망 요일 (ex: "월", "수")

  // 배송기사(DRIVER) 전용
  driverInfo       DriverInfo?
  deliveredParcels Parcel[]         @relation("DriverDetails") // 기사에게 배정된 소포들
  documents        DocumentUpload[] // 자격증/경력 등 제출된 서류들
}

model StoreInfo {
  id               Int      @id @default(autoincrement()) // 고유 ID
  user             User     @relation(fields: [userId], references: [id]) // 소유한 사용자 (OWNER)
  userId           Int      @unique // 연결된 유저 ID
  address          String // 도로명/지번 주소 (카카오 API에서 가져온 주소)
  detailAddress    String // 사용자 입력 상세 주소 (4층 402호 등)
  expectedSize     String // 예상 택배 크기 (소형/중형/대형 등)
  monthlyCount     Int // 월 평균 택배 수량
  latitude       Float?  // 지도용 위도
  longitude      Float?  // 지도용 경도
  pickupPreference String  // 수거 희망 요일 (ex: 월, 수) → 배열 제거 (MySQL은 기본적으로 배열 지원 X)
}

model DriverInfo {
  id             Int    @id @default(autoincrement()) // 고유 ID
  user           User   @relation(fields: [userId], references: [id]) // 연결된 배송기사 유저
  userId         Int    @unique // 유저 ID
  phoneNumber   String  // 기사 전화번호
  vehicleNumber String  // 기사 차량번호
  regionCity     String // 담당 시 (서울시 등)
  regionDistrict String // 담당 구 (강남구 등)
}

model DocumentUpload {
  id         Int          @id @default(autoincrement()) // 고유 ID
  user       User         @relation(fields: [userId], references: [id]) // 업로드한 사용자
  userId     Int // 유저 ID
  type       DocumentType // 서류 종류 (LICENSE, CAREER)
  fileUrl    String // S3 등 외부 파일 URL
  uploadedAt DateTime     @default(now()) // 업로드 시각
}

model PointTransaction {
  id        Int      @id @default(autoincrement()) // 고유 ID
  user      User     @relation(fields: [userId], references: [id]) // 대상 사용자
  userId    Int // 유저 ID
  amount    Int // 포인트 변화량 (+충전, -사용)
  type PointTransactionType // 충전 or 사용 여부
  reason    String // 사유 또는 설명
  createdAt DateTime @default(now()) // 생성 시각
  expiredAt DateTime? // 소멸 정책 적용 시 참고용
}

model SubscriptionPlan {
  id        Int     @id @default(autoincrement()) // 고유 ID
  name      String  @unique // 구독제 이름 (베이직, 프리미엄 등)
  price     Int // 요금 (정액제)
  createdAt DateTime @default(now()) // 등록 시각
  users     User[] // 이 요금제를 사용하는 유저들
}

model Parcel {
  id               Int             @id @default(autoincrement()) // 고유 ID
  owner            User            @relation("OwnerDetails", fields: [ownerId], references: [id]) // 발송자 (OWNER)
  ownerId          Int // 발송자 유저 ID
  driver           User?           @relation("DriverDetails", fields: [driverId], references: [id]) // 배송 기사
  driverId         Int?

  productName      String // 제품명 (나이키 운동화 등)
  size             String // 택배 크기 (소/중/대/특대 등)
  caution          Boolean @default(false) // 파손주의 여부
  recipientName    String // 수령인 이름
  recipientPhone   String // 수령인 전화번호
  recipientAddr    String // 수령인 주소
  detailAddress    String? // 수령인 상세 주소
  trackingCode     String? @unique // 운송장 번호 (고유) — 생성 시에는 없어도 됨

  status           DeliveryStatus  @default(PENDING) // 배송 상태 (PENDING, IN_PROGRESS, COMPLETED)
  pickupDate DateTime? // 실제 수거 예정일 (선택적 필드)
  completedAt      DateTime? // 배송 완료 시각
  deliveryImageUrl String          @default("") // 인증 사진 S3 URL
  createdAt  DateTime @default(now()) // 소포 등록 시각
}
